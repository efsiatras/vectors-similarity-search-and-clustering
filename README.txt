 ____________________________________ ____________________________________
|                                    |                                    |
| Όνομα: Ευστάθιος             	     | Όνομα: Βασίλειος - Μάριος          |
| Επίθετο: Σιάτρας                   | Επίθετο: Παναγάκης                 |
| Α.Μ: 1115201600152 		     | Α.Μ: 1115201600123                 |
|____________________________________|____________________________________|

---------
Τίτλος
---------
Αναζήτηση και συσταδοποίηση διανυσμάτων στη C.

----------
Github 
----------
https://github.com/ssiatras/AlgorithmicProj1

----------------
Λειτουργικότητα
----------------
Το πρόγραμμα ικανοποιεί όλες τις απαιτήσεις, όπως αυτές περιγράφονται στην εκφώνηση της εργασίας.

-----------------------------------
Περιβάλλον υλοποίησης και δοκιμής
-----------------------------------
Το πρόγραμμα γράφτηκε σε γλώσσα C και δοκιμάστηκε στα μηχανήματα Linux της σχολής.

-------------
Μεταγλώττιση
-------------
Για την πλήρη μεταγλώττιση του προγράμματος αρκεί η χρήση των εντολών

make clean
make

----------
Εκτέλεση
----------
Η εκτέλεση του προγράμματος γίνεται με τους εξής τρόπους:

Για το LSH: (Όλες οι παράμετροι είναι προαιρετικές, αφού υπάρχουν default τιμές για τις μεταβλητές, ενώ τα αρχεία μπορούν να δωθούν και σε runtime)

./lsh –d <input file> –q <query file> –k <int> -L <int> -ο <output file> -Ν <number of nearest> -R <radius>


Για το Hypercube: (Όλες οι παράμετροι είναι προαιρετικές, αφού υπάρχουν default τιμές για τις μεταβλητές, ενώ τα αρχεία μπορούν να δωθούν και σε runtime)

$./cube –d <input file> –q <query file> –k <int> -M <int> -probes <int> -ο <output file> -Ν <number of nearest> -R <radius>


Για το Cluster: (Όλες οι παράμετροι είναι υποχρεωτικές, εκτός της παραμέτρου -complete)

$./cluster –i <input file> –c <configuration file> -o <output file> -complete <optional> -m <method: Classic OR LSH or Hypercube>


-------------------
Κατάλογος Αρχείων
-------------------

hastable/hasnode.c	// Υλοποίηση δομής bucket για τα hashtables του LSH
hastable/hashnode.h  	//

hastable/hashtable.c 	// Υλοποίηση δομής hashtable για τον LSH
hastable/hashtable.h 	//

hastable/htArray.c   	// Υλοποίηση δομής πίνακα με hashtables για τον LSH
hastable/htArray.h   	//


hypercube/fArray.c	// Υλοποίηση δομής 2D πίνακα για τις τιμές των συναρτήσεων f
hypercube/fArray.h	//

hypercube/hypercube.c	// Υλοποίηση δομής hashtable του Hypercube
hypercube/hypercube.h	//

hypercube/vertex.c	// Υλοποίηση δομής bucket για το hashtable του Hypercube
hypercube/vertex.h	//


images/image.c		// Υλοποίηση δομής για αναπαράστασης εικόνας
images/image.h		//

images/imageArray.c	// Υλοποίηση δομής πίνακα με εικόνες
images/imageArray.h	//

images/imageNode.c	// Υλοποίηση δομής λίστας με εικόνες
images/imageNode.h	//


kmedians/kmedians.c	// Υλοποίηση δομής για το Cluster
kmedians/kmedians.h	//


utils/functions.c	// Βοηθητικές συναρτήσεις
utils/functions.h	//

utils/timer.c		// Υλοποίση συναρτήσεων χρονομέτρησης
utils/timer.h		//


cluster.conf		// Configuration file
main_cluster.c		// Εκτέλεση αλγορίθμων για Cluster
main_cube.c		// Εκτέλεση αλγορίθμων για Hypercube
main_lsh.c		// Εκτέλεση αλγορίθμων για LSH
Makefile		// Μεταγλώττιση προγράμματος


----------------------
Περιγραφή - Παραδοχές
----------------------

- Ο κώδικας είναι επαρκώς σχολιασμένος και οι λεπτομέρειες της υλοποίησης είναι ευδιάκριτες.

Μερικές Παρατηρήσεις - Παραδοχές:

- Οι τιμές των w που δίνουμε είναι αυτές που μας έδωσαν τα καλύτερα πειραματικά δεδομένα, για την ικανοποίηση του βέλτιστου
tradeoff απόδοσης / ακρίβειας στα δοσμένα datasets.
Για κάποια από τα ενδεικτικά αποτελέσματα που έχουν αναρτηθεί στο e-class τα αντίστοιχα
δικά μας αποτελέσματά είναι τα εξής

Hypercube
k=13, M=20, probes=3, w=40000

maxAF = 3.82092 and averageAF = 1.95521 and not found: 0

LSH
k=5, L=7, w=4000

maxAF = 2.62271 and averageAF 1.66032 and not found: 0

 
- Στο Cluster το Reverse Assignment με LSH και Hypercube έχει υλοποιηθεί με τον εναλλακτικό τρόπο 
που είχε αναφέρει στο μάθημα ο κύριος Χαμόδρακας, δηλαδή με την εισαγωγή των στοιχείων ενός bucket στο κεντροειδές που βρίσκεται 
σε αυτό το bucket. Σε περίπτωση που υπάρχουν περισσότερα από ένα κεντροειδή στο bucket εκτελείται ο κλασσικός αλγόριθμος του Lloyd.

- Στο Cluster για το update χρησιμοποιήθηκε ο αλγόριθμος του Torben Mogensen (Torben Median Algorithm), ο οποίος δεν  
μεταβάλει την πίνακα εισόδου όταν ψάχνει για το median και έχει πολυπλοκότητα περίπου ίση με O(log(n)).

-----------
Σημείωση
-----------
Υπάρχει ένα μικρό πρόβλημα με την απελευθέρωση της μνήμης κατά την εκτέλεση του Cluster με μέθοδο LSH.
Πιο συγκεκριμένα, το πρόβλημα σχετίζεται με την αφαίρεση των κεντροειδών από τα L Hashtables,
με αποτέλεσμα να παραμένουν μέσα στη δομή περισσότερα από τα απαιτούμενα κεντροειδή.